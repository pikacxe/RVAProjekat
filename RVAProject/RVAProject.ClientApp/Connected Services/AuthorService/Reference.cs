//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RVAProject.ClientApp.AuthorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthorService.IAuthorService")]
    public interface IAuthorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/AddAuthor", ReplyAction="http://tempuri.org/IAuthorService/AddAuthorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RVAProject.Common.CustomAppException), Action="http://tempuri.org/IAuthorService/AddAuthorCustomAppExceptionFault", Name="CustomAppException", Namespace="http://schemas.datacontract.org/2004/07/RVAProject.Common")]
        void AddAuthor(RVAProject.Common.DTOs.AuthorDTO.AuthorRequest authorRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/AddAuthor", ReplyAction="http://tempuri.org/IAuthorService/AddAuthorResponse")]
        System.Threading.Tasks.Task AddAuthorAsync(RVAProject.Common.DTOs.AuthorDTO.AuthorRequest authorRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/GetAllAuthors", ReplyAction="http://tempuri.org/IAuthorService/GetAllAuthorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RVAProject.Common.CustomAppException), Action="http://tempuri.org/IAuthorService/GetAllAuthorsCustomAppExceptionFault", Name="CustomAppException", Namespace="http://schemas.datacontract.org/2004/07/RVAProject.Common")]
        RVAProject.Common.DTOs.AuthorDTO.AuthorInfo[] GetAllAuthors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/GetAllAuthors", ReplyAction="http://tempuri.org/IAuthorService/GetAllAuthorsResponse")]
        System.Threading.Tasks.Task<RVAProject.Common.DTOs.AuthorDTO.AuthorInfo[]> GetAllAuthorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/GetAuthorById", ReplyAction="http://tempuri.org/IAuthorService/GetAuthorByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RVAProject.Common.CustomAppException), Action="http://tempuri.org/IAuthorService/GetAuthorByIdCustomAppExceptionFault", Name="CustomAppException", Namespace="http://schemas.datacontract.org/2004/07/RVAProject.Common")]
        RVAProject.Common.DTOs.AuthorDTO.AuthorInfo GetAuthorById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/GetAuthorById", ReplyAction="http://tempuri.org/IAuthorService/GetAuthorByIdResponse")]
        System.Threading.Tasks.Task<RVAProject.Common.DTOs.AuthorDTO.AuthorInfo> GetAuthorByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/UpdateAuthor", ReplyAction="http://tempuri.org/IAuthorService/UpdateAuthorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RVAProject.Common.CustomAppException), Action="http://tempuri.org/IAuthorService/UpdateAuthorCustomAppExceptionFault", Name="CustomAppException", Namespace="http://schemas.datacontract.org/2004/07/RVAProject.Common")]
        void UpdateAuthor(RVAProject.Common.DTOs.AuthorDTO.UpdateAuthorRequest updateAuthorRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/UpdateAuthor", ReplyAction="http://tempuri.org/IAuthorService/UpdateAuthorResponse")]
        System.Threading.Tasks.Task UpdateAuthorAsync(RVAProject.Common.DTOs.AuthorDTO.UpdateAuthorRequest updateAuthorRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/DeleteAuthor", ReplyAction="http://tempuri.org/IAuthorService/DeleteAuthorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RVAProject.Common.CustomAppException), Action="http://tempuri.org/IAuthorService/DeleteAuthorCustomAppExceptionFault", Name="CustomAppException", Namespace="http://schemas.datacontract.org/2004/07/RVAProject.Common")]
        void DeleteAuthor(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorService/DeleteAuthor", ReplyAction="http://tempuri.org/IAuthorService/DeleteAuthorResponse")]
        System.Threading.Tasks.Task DeleteAuthorAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorServiceChannel : RVAProject.ClientApp.AuthorService.IAuthorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorServiceClient : System.ServiceModel.ClientBase<RVAProject.ClientApp.AuthorService.IAuthorService>, RVAProject.ClientApp.AuthorService.IAuthorService {
        
        public AuthorServiceClient() {
        }
        
        public AuthorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAuthor(RVAProject.Common.DTOs.AuthorDTO.AuthorRequest authorRequest) {
            base.Channel.AddAuthor(authorRequest);
        }
        
        public System.Threading.Tasks.Task AddAuthorAsync(RVAProject.Common.DTOs.AuthorDTO.AuthorRequest authorRequest) {
            return base.Channel.AddAuthorAsync(authorRequest);
        }
        
        public RVAProject.Common.DTOs.AuthorDTO.AuthorInfo[] GetAllAuthors() {
            return base.Channel.GetAllAuthors();
        }
        
        public System.Threading.Tasks.Task<RVAProject.Common.DTOs.AuthorDTO.AuthorInfo[]> GetAllAuthorsAsync() {
            return base.Channel.GetAllAuthorsAsync();
        }
        
        public RVAProject.Common.DTOs.AuthorDTO.AuthorInfo GetAuthorById(System.Guid id) {
            return base.Channel.GetAuthorById(id);
        }
        
        public System.Threading.Tasks.Task<RVAProject.Common.DTOs.AuthorDTO.AuthorInfo> GetAuthorByIdAsync(System.Guid id) {
            return base.Channel.GetAuthorByIdAsync(id);
        }
        
        public void UpdateAuthor(RVAProject.Common.DTOs.AuthorDTO.UpdateAuthorRequest updateAuthorRequest) {
            base.Channel.UpdateAuthor(updateAuthorRequest);
        }
        
        public System.Threading.Tasks.Task UpdateAuthorAsync(RVAProject.Common.DTOs.AuthorDTO.UpdateAuthorRequest updateAuthorRequest) {
            return base.Channel.UpdateAuthorAsync(updateAuthorRequest);
        }
        
        public void DeleteAuthor(System.Guid id) {
            base.Channel.DeleteAuthor(id);
        }
        
        public System.Threading.Tasks.Task DeleteAuthorAsync(System.Guid id) {
            return base.Channel.DeleteAuthorAsync(id);
        }
    }
}
